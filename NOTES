
* Set the seed for the PRNG to some fixed value (for testing/devel purposes); we can change it back to whatever the default seed method is once the code works.
   >> help rng
   >> rng('default') % Mersenne twister (this is a pretty good PRNG), seed 0
  

* Draw prandom vectors (TODO: is this right?  cf. loldog.jpg)
   >> N = ...; d = ...;
   >> mu = zeros([N d]);
   >> Sigma = 1/N * eye([d d]);
   >> Phi = mvnrnd(mu,Sigma);

   Wcan normalize the columns of Phi (to pass M1 of Section III part A), but it's not needed for the recovery algorithm.


* Do a QR ``insert'' (adding a column) in step 4 of Algorithm 3!
   >> help qrinsert
   >> [Q1,R1] = qrinsert(Q,R,n+1,new_col,'col'); % insert column on the right side of A


* Code documentation: There should be a way that we can get `help our_custom_function` to spit out a description, usage, etc.  It's prolly overkill for our project, but it might be neat.
   
   Update: check out mfile_header_template.m for a nice header template.


* Fortran
   - Generating N(0,1) psuedorandom numbers:
      http://en.wikipedia.org/wiki/Normal_distribution#Generating_values_from_normal_distribution
      http://en.wikipedia.org/wiki/Box_M%C3%BCller
      http://en.wikipedia.org/wiki/Marsaglia_polar_method
      http://epubs.siam.org/doi/abs/10.1137/1006063
      http://en.wikipedia.org/wiki/Ziggurat_algorithm

* DATA:
   - tropp_fig1_data_glnx64.mat.bak_01
      1000 vectors per N, vectors chosen with uniform random entries from [-1,1]

   - tropp_fig1_data_glnx64.mat.bak_02
      1000 vectors per N, vectors chosen with entries equal to 1.0; this is what they did in Tropp 2007
